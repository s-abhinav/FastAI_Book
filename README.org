#+Title: README

Artificial Intelligence has rapidly transformed the world, with groundbreaking developments reshaping industries and our daily lives. Among these, the emergence of large-scale language models like ChatGPT has captured global attention. PyTorch has become the go-to framework for AI research and development, praised for its flexibility, user-friendly Python API, and efficient GPU acceleration across various platforms, including NVIDIA CUDA, AMD ROCm, and Apple's hardware.

My journey into AI began with Scheme, which I first encountered at university. I was struck by its elegance and power, leading me to explore it more deeply through Structure and Interpretation of Computer Programs. My initial intention was to study Paradigms of Artificial Intelligence Programming by Peter Norvig, but despite starting the book some time ago, I never fully committed to it. As my career in programming progressed, I found myself working with NexJ Scheme, which reignited my passion for the language. Around 2015, as breakthroughs like DeepMind's AlphaGo captured my attention, I became increasingly drawn to AI. It felt natural to dive deeper into Scheme, especially since AI, as a formal field, was born in John McCarthy’s 1956 Dartmouth Conference, where he also introduced Lisp—a language he created at MIT for AI development. However, with AI technology advancing rapidly around frameworks like PyTorch and the impressive body of work being done within it, I believe it’s now the right time to dive into PyTorch. Ironically, the Fast AI book, which I’ve chosen to guide my study, was recommended to me by ChatGPT.

This repository will document my exploration of Fast AI and PyTorch through Emacs org-mode, an unconventional approach since the Fast AI course typically uses Jupyter Notebooks. The choice of org-mode feels natural for me, as Emacs is my primary editor for personal programming projects, and I’ve previously used org-mode to document exercises from Structure and Interpretation of Computer Programs. I also find that org-mode offers the full power of Emacs, which Jupyter Notebooks lack, and this has made a significant difference in maintaining my interest and progress.
